#!/bin/sh

destination="$1"
# memory_limit="$2"
shift 2
main_source="$1"

if [ -n "$ENTRY_POINT" ]; then
  main_source="$ENTRY_POINT"
else
  # Fpc only accepts a single source file, and will detect and compile
  # unit dependencies itself. Let's try to autodetect the main program.
  source_file_count=0
  found_main_file=""
  for i in "$@" ; do
    source_file_count=$((source_file_count+1))
    if grep -E '^[[:space:]]*program[[:space:]]+[A-Za-z_0-9]+([[:space:]]*\([[:space:]]*[A-Za-z_0-9]+[[:space:]]*,[[:space:]]*[A-Za-z_0-9]+[[:space:]]*\))?[[:space:]]*;' "$i" >/dev/null ; then
      found_main_file="$i"
    fi
  done
  if [ $source_file_count = 1 ]; then
    true # Skip this case.
  elif [ -n "$found_main_file" ]; then
    [ -n "$DEBUG" ] && echo "Debug: using '$found_main_file' as main program file."
    main_source="$found_main_file"
  else
    echo "Warning: could not determine main program file, using '$main_source'."
  fi

  # Report the entry point, so it can be saved, e.g. for later replay:
  echo "Info: detected entry_point: $main_source"
fi

# -viwn:    Verbose warnings, notes and informational messages
# -02:      Level 2 optimizations (default for speed)
# -Sg:      Support label and goto commands (for those who need it ;-)
# -XS:      Static link with all libraries
fpc -dDOMJUDGE -viwn -O2 -Sg -XS -o"$destination" "$main_source"
exitcode=$?
rm -f "$destination.o"
exit $exitcode
